{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KIIT\\\\Documents\\\\GITHUB\\\\DaeDarus1\\\\src\\\\components\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Sawo from \"sawo\";\nimport styles from \"./styles\";\nimport Dashboard from './Dashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // state values\n  const [userPayload, setUserPayload] = useState({});\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // Sawo Configuration, required to render form in the container\n    // onSuccess callback will get invoke, after successful login\n    const sawoConfig = {\n      // should be same as the id of the container\n      containerID: 'sawo-container',\n      // can be one of 'email' or 'phone_number_sms'\n      identifierType: \"email\",\n      // Add the API key\n      apiKey: \"4248b081-d3c1-44a5-8fd0-af28bd1ec1ca\",\n      // Add a callback here to handle the payload sent by sdk\n      onSuccess: onSuccessLogin\n    }; // creating instance\n\n    let sawo = new Sawo(sawoConfig); // calling method to show form\n\n    sawo.showForm();\n  }, []); // Sawo: \n  // OnSuccess Callback method\n\n  const onSuccessLogin = async payload => {\n    setUserPayload(payload);\n    setIsLoggedIn(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.containerStyle,\n      children: /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sawo Login Form \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.loggedin,\n            children: userPayload && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Dashboard, {\n                userPayload: userPayload\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 11\n              }, this)\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), !isLoggedIn && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.formContainer,\n          id: \"sawo-container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Zhlq4JRhqQNu3XGChchXKuoFpso=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/KIIT/Documents/GITHUB/DaeDarus1/src/components/App.js"],"names":["React","useEffect","useState","Sawo","styles","Dashboard","App","userPayload","setUserPayload","isLoggedIn","setIsLoggedIn","sawoConfig","containerID","identifierType","apiKey","onSuccess","onSuccessLogin","sawo","showForm","payload","containerStyle","loggedin","formContainer"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEd;AACA;AAEA,UAAMU,UAAU,GAAG;AACjB;AACAC,MAAAA,WAAW,EAAE,gBAFI;AAGjB;AACAC,MAAAA,cAAc,EAAE,OAJC;AAKjB;AACAC,MAAAA,MAAM,EAAE,sCANS;AAOjB;AACAC,MAAAA,SAAS,EAAEC;AARM,KAAnB,CALc,CAgBd;;AACA,QAAIC,IAAI,GAAG,IAAId,IAAJ,CAASQ,UAAT,CAAX,CAjBc,CAmBd;;AACAM,IAAAA,IAAI,CAACC,QAAL;AACD,GArBQ,EAqBN,EArBM,CAAT,CANa,CA+Bb;AACA;;AAEA,QAAMF,cAAc,GAAG,MAAMG,OAAN,IAAkB;AACvCX,IAAAA,cAAc,CAACW,OAAD,CAAd;AACAT,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAHD;;AAKA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,2BAEE;AAAK,MAAA,KAAK,EAAEN,MAAM,CAACgB,cAAnB;AAAA,6BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAGGX,UAAU,iBACT,QAAC,KAAD,CAAO,QAAP;AAAA,iCACE;AAAK,YAAA,KAAK,EAAEL,MAAM,CAACiB,QAAnB;AAAA,sBACCd,WAAW,iBAClB;AAAA,qCACE,QAAC,SAAD;AAAW,gBAAA,WAAW,EAAEA;AAAxB;AAAA;AAAA;AAAA;AAAA;AADF;AAFM;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJJ,EAiBI,CAACE,UAAD,iBACE;AAAK,UAAA,KAAK,EAAEL,MAAM,CAACkB,aAAnB;AAAkC,UAAA,EAAE,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,gBAlBN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;GArEQhB,G;;KAAAA,G;AAuET,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Sawo from \"sawo\";\nimport styles from \"./styles\"\nimport Dashboard from './Dashboard'\n\nfunction App() {\n\n  // state values\n  const [userPayload, setUserPayload] = useState({})\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n\n  useEffect(() => {\n\n    // Sawo Configuration, required to render form in the container\n    // onSuccess callback will get invoke, after successful login\n\n    const sawoConfig = {\n      // should be same as the id of the container\n      containerID: 'sawo-container',\n      // can be one of 'email' or 'phone_number_sms'\n      identifierType: \"email\",\n      // Add the API key\n      apiKey: \"4248b081-d3c1-44a5-8fd0-af28bd1ec1ca\",\n      // Add a callback here to handle the payload sent by sdk\n      onSuccess: onSuccessLogin\n    };\n\n    // creating instance\n    let sawo = new Sawo(sawoConfig)\n\n    // calling method to show form\n    sawo.showForm();\n  }, [])\n\n\n\n  // Sawo: \n  // OnSuccess Callback method\n\n  const onSuccessLogin = async(payload) => {\n    setUserPayload(payload);\n    setIsLoggedIn(true);\n  }\n\n  return ( \n    <React.Fragment>\n      \n      <div style={styles.containerStyle}>\n        <section>\n          <h1>Sawo Login Form </h1>\n          {/* Showing Successful login message */}\n          {isLoggedIn && (\n            <React.Fragment>\n              <div style={styles.loggedin}>\n              {userPayload && (\n        <>\n          <Dashboard userPayload={userPayload} />\n        </>\n        )}\n              </div>\n            </React.Fragment>\n          )}\n\n          {/* Showing login form */}\n          {\n            !isLoggedIn && (\n              <div style={styles.formContainer} id=\"sawo-container\">\n                {/* Sawo form will appear here */}\n              </div>\n          )}\n        </section>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}